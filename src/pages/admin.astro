---
// src/pages/admin.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Admin Panel">
  <div class="container mx-auto px-4 sm:px-6 py-12 min-h-[70vh]">
    <!-- This div will be shown to logged-in users -->
    <div id="admin-panel" class="hidden">
      <div class="flex flex-col sm:flex-row justify-between sm:items-center mb-8 gap-4">
        <div>
          <h1 class="text-3xl font-bold">Admin Dashboard</h1>
          <p id="admin-email" class="text-gray-500"></p>
        </div>
        <button id="logout-btn" class="btn btn-secondary px-4 py-2 text-sm self-start sm:self-center">Logout</button>
      </div>

      <!-- Admin content will be rendered here by client-side JS -->
      <div id="admin-content" class="space-y-12">
        <section id="announcements-section" class="card p-6"></section>
        <section id="projects-section" class="card p-6"></section>
      </div>
    </div>

    <!-- Login Form (Unchanged) -->
    <div id="login-form-wrapper" class="max-w-md mx-auto mt-16 card p-8">
      <h2 class="text-2xl font-bold text-center mb-6">Admin Login</h2>
      <form id="login-form">
        <div class="space-y-4">
          <div><label for="email" class="block mb-2 font-medium">Email</label><input type="email" id="email" name="email" class="input-field" required></div>
          <div><label for="password" class="block mb-2 font-medium">Password</label><input type="password" id="password" name="password" class="input-field" required></div>
          <div><button type="submit" class="btn w-full">Log In</button><p id="login-status" class="text-center mt-4 h-5 text-red-500"></p></div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../lib/supabase';
  // <-- CHANGE #1: REMOVED the 'uuid' import. It's no longer needed. -->

  const BUCKET_NAME = 'bucketprojectimages';
  const loginWrapper = document.getElementById('login-form-wrapper');
  const adminPanel = document.getElementById('admin-panel');
  const adminEmailEl = document.getElementById('admin-email');
  const loginForm = document.getElementById('login-form') as HTMLFormElement;
  const loginStatus = document.getElementById('login-status');
  const logoutBtn = document.getElementById('logout-btn');
  const announcementsSection = document.getElementById('announcements-section');
  const projectsSection = document.getElementById('projects-section');

  let announcements = [];
  let projects = [];
  
  function renderAnnouncements() {
    announcementsSection.innerHTML = `
      <h3 class="font-bold text-xl mb-4">ðŸ“¢ Announcements</h3>
      <form id="announcement-form" class="space-y-4 mb-6">
        <textarea name="content" class="input-field" placeholder="New announcement text..." required></textarea>
        <button type="submit" class="btn text-base py-2">Post Announcement</button>
      </form>
      <div id="announcement-list" class="space-y-2">
        ${announcements.map(ann => `
          <div class="flex justify-between items-center bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
            <span>${ann.content}</span>
            <button class="text-red-500 hover:text-red-700" data-id="${ann.id}" onclick="deleteAnnouncement(event)">Delete</button>
          </div>
        `).join('') || '<p class="text-gray-500">No active announcements.</p>'}
      </div>
    `;
    document.getElementById('announcement-form').addEventListener('submit', handleAnnouncementSubmit);
  }
  
  function renderProjects() {
    projectsSection.innerHTML = `
      <h3 class="font-bold text-xl mb-4">ðŸ’¼ Projects (Case Studies)</h3>
      <form id="project-form" class="space-y-4 mb-6 border-b dark:border-gray-700 pb-6">
        <input name="title" class="input-field" placeholder="Project Title" required />
        <textarea name="description" class="input-field" placeholder="Project Description"></textarea>
        <input name="tech_stack" class="input-field" placeholder="Tech Stack (comma-separated)" />
        <textarea name="results" class="input-field" placeholder="Results / Impact"></textarea>
        <div>
            <label class="block mb-2 font-medium">Project Image</label>
            <input type="file" id="project-image-upload" accept="image/*" class="input-field" required />
            <p id="upload-status" class="text-sm text-gray-500 mt-1"></p>
        </div>
        <button type="submit" class="btn text-base py-2">Add Project</button>
      </form>
      <div id="project-list" class="space-y-4">
        ${projects.map(p => `
          <div class="flex justify-between items-center bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
            <span class="font-semibold">${p.title}</span>
            <button class="text-red-500 hover:text-red-700" data-id="${p.id}" onclick="deleteProject(event)">Delete</button>
          </div>
        `).join('') || '<p class="text-gray-500">No projects yet.</p>'}
      </div>
    `;
    document.getElementById('project-form').addEventListener('submit', handleProjectSubmit);
  }

  async function fetchData() {
    const { data: annData } = await supabase.from('announcements').select('*').order('created_at', { ascending: false });
    announcements = annData || [];
    const { data: projData } = await supabase.from('projects').select('*').order('created_at', { ascending: false });
    projects = projData || [];
    renderAll();
  }

  function renderAll() {
    renderAnnouncements();
    renderProjects();
  }

  async function handleAnnouncementSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    await supabase.from('announcements').update({ is_active: false }).eq('is_active', true);
    await supabase.from('announcements').insert({ content: formData.get('content'), is_active: true });
    form.reset();
    await fetchData();
  }
  
  window.deleteAnnouncement = async (e) => {
    if (!confirm('Are you sure?')) return;
    await supabase.from('announcements').delete().eq('id', e.target.dataset.id);
    await fetchData();
  }
  
  async function handleProjectSubmit(e) {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const uploadStatus = document.getElementById('upload-status');
    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    uploadStatus.textContent = "Uploading image...";

    const imageFile = (document.getElementById('project-image-upload') as HTMLInputElement).files[0];
    if (!imageFile) { alert('Please select an image.'); submitBtn.disabled = false; return; }

    // <-- CHANGE #2: USE the native browser API to generate a unique ID -->
    const fileName = `${crypto.randomUUID()}-${imageFile.name}`;

    const { error: uploadError } = await supabase.storage.from(BUCKET_NAME).upload(fileName, imageFile);
    if (uploadError) { alert('Upload failed: ' + uploadError.message); submitBtn.disabled = false; return; }

    uploadStatus.textContent = "Image uploaded! Saving project...";

    const { data: { publicUrl } } = supabase.storage.from(BUCKET_NAME).getPublicUrl(fileName);
    const formData = new FormData(form);
    const techStack = (formData.get('tech_stack') as string).split(',').map(s => s.trim()).filter(Boolean);
    const projectData = { title: formData.get('title'), description: formData.get('description'), tech_stack: techStack, results: formData.get('results'), image_url: publicUrl };

    await supabase.from('projects').insert(projectData);
    form.reset();
    uploadStatus.textContent = "";
    await fetchData();
    submitBtn.disabled = false;
  }

  window.deleteProject = async (e) => {
    if (!confirm('Are you sure?')) return;
    await supabase.from('projects').delete().eq('id', e.target.dataset.id);
    await fetchData();
  }

  async function checkSession() {
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
      loginWrapper.classList.add('hidden');
      adminPanel.classList.remove('hidden');
      adminEmailEl.textContent = `Logged in as ${session.user.email}`;
      await fetchData();
    } else {
      loginWrapper.classList.remove('hidden');
      adminPanel.classList.add('hidden');
    }
  }

  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(loginForm);
    const { error } = await supabase.auth.signInWithPassword({ email: formData.get('email') as string, password: formData.get('password') as string });
    if (error) loginStatus.textContent = error.message;
    else { loginForm.reset(); await checkSession(); }
  });

  logoutBtn.addEventListener('click', async () => { await supabase.auth.signOut(); await checkSession(); });
  document.addEventListener('DOMContentLoaded', checkSession);
</script>